# üîç AUDIT TECHNIQUE - JULES GEMINI

## üìä R√âSUM√â EX√âCUTIF
- √âtat g√©n√©ral application: En cours de d√©veloppement pour le workflow √† 4 niveaux. Modifications structurelles importantes apport√©es. N√©cessite tests et validation complets.
- Bugs critiques identifi√©s: Aucun bug bloquant direct identifi√© lors de l'audit initial, mais des points de robustesse et de coh√©rence ont √©t√© adress√©s. Impossibilit√© d'ex√©cuter les tests automatis√©s existants.
- Modifications apport√©es: Workflow d'approbation √©tendu √† 4 niveaux, nouveaux r√¥les, adaptation des mod√®les, policies, ressources Filament, seeders et dashboards. Logique de mise √† jour des statuts et cr√©ation de commandes initi√©e.
- Statut validation: Simulation de tests effectu√©e, TODOs identifi√©s. Tests r√©els non ex√©cut√©s.

## üßê OBSERVATIONS D'AUDIT INITIAL (Phase 1)

### Mod√®le `App\Models\DemandeDevis`
1.  **Coh√©rence D√©finition Workflow**:
    *   **Observation**: La m√©thode `approvalSteps()` du mod√®le duplique la d√©finition des √©tapes (labels, descriptions, r√¥les) qui est aussi pr√©sente dans `config/approval.php`.
    *   **Risque**: Incoh√©rences si les modifications ne sont pas synchronis√©es.
    *   **Recommandation Audit**: Clarifier que `config/approval.php` est la source unique de v√©rit√© pour la structure du workflow. Envisager de simplifier ou synchroniser `approvalSteps()` dans le mod√®le.
    *   **Correction Appliqu√©e (Action 4)**: `approvalSteps()` supprim√©e de `DemandeDevis.php`. `config/approval.php` est maintenant la source de v√©rit√©. `getCurrentApprovalStepLabel()` lit depuis le package.
2.  **Logique des Scopes `EnAttenteBudget` et `EnAttenteAchat`**:
    *   **Observation**: `scopeEnAttenteBudget` utilise `orWhereDoesntHave('approvalsHistory', ...)`, ce qui peut √™tre complexe.
    *   **Point √† v√©rifier**: Fiabilit√© de la mise √† jour de `current_step` par le package. Si fiable, simplifier les scopes.
    *   **Correction Appliqu√©e (Action 4)**: Scopes mis √† jour pour se baser sur `current_step` et les nouveaux noms d'√©tapes. Simplification de la logique en se fiant √† `current_step`.
3.  **Synchronisation `statut` vs `current_step`**:
    *   **Observation**: Deux champs (`statut` manuel, `current_step` du package) pour suivre l'√©tat.
    *   **Risque**: D√©synchronisation.
    *   **Recommandation Audit**: Privil√©gier `current_step` et les √©tats du package comme source de v√©rit√©. D√©duire le `statut` applicatif ou assurer une mise √† jour atomique.
    *   **Correction Partielle (Action 9)**: Le champ `DemandeDevis.statut` est maintenant mis √† jour dans les actions Filament apr√®s chaque approbation/rejet. Une solution via Event Listeners serait plus robuste mais plus complexe √† impl√©menter sans tests directs.
4.  **Fichiers Fallback M√©dia**:
    *   **Observation**: Utilisation de `useFallbackUrl` et `useFallbackPath` pour les m√©dias.
    *   **Point √† v√©rifier**: Existence des fichiers fallback (ex: `public/images/no-quote.pdf`) pour √©viter des erreurs. (Non v√©rifi√© activement)
5.  **Champ `user_id` manquant**:
    *   **Observation (Action 5)**: Le champ `user_id` pour lier la demande √† son cr√©ateur √©tait manquant.
    *   **Correction Appliqu√©e (Action 5)**: Migration cr√©√©e pour ajouter `user_id`. Mod√®le mis √† jour (`$fillable`, relation `creator()`). Policy adapt√©e.

### `App\Filament\Resources\DemandeDevisResource`
1.  **Logique d'Autorisation et Visibilit√©**:
    *   **Observation**: Nombreuses conditions de visibilit√©/action directement dans la ressource.
    *   **Recommandation Audit**: Centraliser la logique d'autorisation dans des Policies Laravel (`DemandeDevisPolicy`) pour am√©liorer la clart√© et la r√©utilisabilit√©, notamment pour `EditAction`, `DeleteAction`.
    *   **Correction Appliqu√©e (Action 5 & 6)**: `DemandeDevisPolicy` mise √† jour avec des m√©thodes sp√©cifiques par √©tape. Les actions dans `DemandeDevisResource` utilisent maintenant ces m√©thodes de policy.
    *   **Observation**: Actions d'approbation/rejet du package (`RingleSoft\LaravelProcessApproval\Filament\Actions`) sont comment√©es.
    *   **Recommandation Audit**: √âvaluer si l'utilisation des actions du package peut simplifier le code. (Non modifi√©, actions manuelles conserv√©es pour l'instant).
2.  **Calcul `prix_total_ttc` (Frontend)**:
    *   **Observation**: Taux de TVA (20%) cod√© en dur (`* 1.20`) dans le JavaScript du formulaire.
    *   **Point √† v√©rifier**: Flexibilit√© du taux de TVA.
    *   **Recommandation Audit**: Assurer la validation et le recalcul syst√©matique du `prix_total_ttc` c√¥t√© serveur.
    *   **Correction Appliqu√©e (Action 6)**: Recalcul serveur ajout√© dans `CreateDemandeDevis::mutateFormDataBeforeCreate` et `EditDemandeDevis::mutateFormDataBeforeSave`.
3.  **Gestion `service_demandeur_id` dans le Formulaire**:
    *   **Observation**: `default()` utilise `request()->get('service_id')`.
    *   **Risque**: Potentiel de manipulation si un utilisateur non autoris√© modifie ce param√®tre.
    *   **Recommandation Audit**: Valider rigoureusement c√¥t√© serveur que l'utilisateur a le droit de cr√©er une demande pour le `service_id` fourni.
    *   **Correction Appliqu√©e (Action 6)**: `request()->get('service_id')` supprim√© du `default()` dans `DemandeDevisResource`. `CreateDemandeDevis::mutateFormDataBeforeCreate` force le `service_id` pour `agent-service`.
4.  **Action `mark_delivered`**:
    *   **Observation**: Action manuelle pour confirmer la livraison avec un commentaire sur sa potentielle interf√©rence avec le workflow.
    *   **Recommandation Audit**: Clarifier son r√¥le. Si elle doit faire avancer le workflow, utiliser les m√©thodes du package d'approbation.
    *   **Correction Appliqu√©e (Action 6)**: Action `mark_delivered` supprim√©e et remplac√©e par l'action `approve_reception` li√©e √† la nouvelle √©tape `controle-reception`.

### `config/approval.php`
1.  **Conditions Symboliques**:
    *   **Observation**: Des conditions (ex: `budget_available`) sont list√©es mais les classes `ConditionChecker` ne sont pas d√©finies. La logique est probablement dans `DemandeDevis::canBeApproved()`.
    *   **Commentaire**: Approche actuelle valide. Pour des conditions plus complexes/sp√©cifiques par √©tape, des `ConditionChecker` d√©di√©s seraient b√©n√©fiques.
    *   **Modification (Action 4)**: `DemandeDevis::canBeApproved()` a √©t√© adapt√©e pour √™tre conditionnelle √† l'√©tape `validation-budget`. Des conditions symboliques ont √©t√© ajout√©es pour les nouvelles √©tapes dans `config/approval.php` mais sans impl√©mentation de `ConditionChecker` pour l'instant.
2.  **R√¥le pour `reception-livraison`**:
    *   **Observation**: L'√©tape `'reception-livraison'` est assign√©e au r√¥le `'service-demandeur'`.
    *   **Risque Cloisonnement**: N'importe quel utilisateur avec ce r√¥le pourrait approuver la r√©ception pour des demandes hors de son service.
    *   **Recommandation Audit**: Renforcer le cloisonnement pour que seuls les utilisateurs du service concern√© (ou l'initiateur) puissent approuver cette √©tape (via condition personnalis√©e ou logique d'action Filament).
    *   **Correction Appliqu√©e (Action 4 & 5)**: L'√©tape est maintenant `controle-reception` assign√©e √† `agent-service`. La `DemandeDevisPolicy::approveControleReception` v√©rifie que l'agent est le cr√©ateur de la demande (via `user_id`).

### `App\Models\BudgetLigne`
1.  **Scope Global pour `service-demandeur`**:
    *   **Observation**: Un scope global filtre les lignes budg√©taires pour le r√¥le `service-demandeur`.
    *   **Point √† v√©rifier**: S'assurer que ce scope n'impacte pas n√©gativement les autres r√¥les (`responsable-budget`, `admin`) qui pourraient n√©cessiter une vue compl√®te.
    *   **Correction Appliqu√©e (Action 7)**: Scope global comment√©. Le filtrage sera g√©r√© explicitement dans les ressources.
2.  **Calcul et Stockage de `montant_depense_reel`**:
    *   **Observation**: `montant_depense_reel` est `fillable`, mais aussi calcul√© dynamiquement par `getMontantDepenseReelCalculatedAttribute()` et utilis√© dans `calculateBudgetRestant()`.
    *   **Risque**: Incoh√©rence si `montant_depense_reel` est mis √† jour manuellement de mani√®re incorrecte.
    *   **Recommandation Audit**: Privil√©gier le calcul dynamique ou s'assurer que les mises √† jour de ce champ sont strictement contr√¥l√©es et coh√©rentes. Envisager de ne pas le rendre `fillable` directement.
    *   **Correction Appliqu√©e (Action 7)**: `montant_depense_reel` retir√© de `$fillable`.
3.  **Scope `EnDepassement`**:
    *   **Observation**: Utilise `whereRaw` pour comparer avec une sous-requ√™te.
    *   **Commentaire**: Fonctionnel. V√©rifier la performance sur de gros volumes de donn√©es. (Non modifi√©, mais la stat de dashboard associ√©e a √©t√© comment√©e).

*(D'autres bugs ou observations seront list√©s ici au fur et √† mesure de leur identification)*

## üîÑ √âVOLUTION WORKFLOW 4 NIVEAUX
### Modifications Mod√®les
- **DemandeDevis.php**:
    - `user_id` ajout√© (migration + fillable + relation `creator()`).
    - `approvalSteps()` supprim√©e.
    - `getCurrentApprovalStepLabel()` modifi√©e pour utiliser info du package.
    - `canBeApproved()` modifi√©e pour √™tre conditionnelle √† l'√©tape `validation-budget`.
    - Scopes mis √† jour/ajout√©s : `EnAttenteValidationResponsableService`, `EnAttenteBudget`, `EnAttenteAchat`, `EnAttenteReception`.
    - Champ `statut` mis √† jour par les actions Filament.
- **BudgetLigne.php**:
    - Scope global pour `service-demandeur` comment√©.
    - `montant_depense_reel` retir√© de `$fillable`.
- **User.php**:
    - `is_service_responsable` utilis√© dans `TestUsersSeeder` pour `responsable-service`.

### Configuration Laravel Process Approval
- **config/approval.php**:
    - Workflow `demande-devis-workflow` mis √† jour avec 4 √©tapes :
        1. `validation-responsable-service` (r√¥le: `responsable-service`)
        2. `validation-budget` (r√¥le: `responsable-budget`)
        3. `validation-achat` (r√¥le: `service-achat`)
        4. `controle-reception` (r√¥le: `agent-service`)
    - Labels, descriptions, r√¥les et conditions symboliques mis √† jour pour chaque √©tape.

### Interfaces Filament
- **DemandeDevisResource.php**:
    - Formulaire: `service_demandeur_id` adapt√© pour `agent-service` (default, disabled), `commentaire_validation` visibilit√© √©tendue.
    - Table: Colonne `serviceDemandeur.nom` visibilit√© adapt√©e, couleurs `current_step_label` mises √† jour.
    - Filtres: `mes_demandes_agent` (pour `user_id`), `demandes_mon_service`, `a_valider_responsable_service` ajout√©s. Filtres `a_valider_budget` et `a_valider_achat` mis √† jour.
    - Actions: `EditAction`, `DeleteAction` utilisent Policy. Actions d'approbation/rejet sp√©cifiques par √©tape, utilisant Policy et mettant √† jour `DemandeDevis.statut`. `mark_delivered` supprim√©e. Cr√©ation de `Commande` ajout√©e √† l'action `approve_achat`. Logique de mise √† jour `Commande` et `Livraison` ajout√©e √† `approve_reception`.
    - `getEloquentQuery()`: Adapt√© pour `agent-service`, `responsable-service`, `service-achat`. Eager load `creator`.
- **CreateDemandeDevis.php / EditDemandeDevis.php**:
    - `mutateFormDataBeforeCreate`: Ajout `user_id = Auth::id()`, recalcul `prix_total_ttc`, logique `service_demandeur_id` pour `agent-service`.
    - `mutateFormDataBeforeSave`: Logique d'autorisation redondante comment√©e (Policy g√®re).
- **Dashboards**:
    - `BudgetStatsWidget.php`: Adapt√© pour `agent-service`/`responsable-service`. Logique `demandesEnCours` et `nouvellesDemandesSoumises` mise √† jour. Stat "D√©passements" comment√©e.
    - `BudgetDashboard.php` (Livewire): Adapt√© pour `agent-service`/`responsable-service`. Logique `demandesEnCours` et `nouvellesDemandesSoumises` mise √† jour. Stat "D√©passements" comment√©e.

### Seeders & Migrations
- **Migration**: `2024_07_15_100000_add_user_id_to_demande_devis_table.php` cr√©√©e.
- **RolePermissionSeeder.php**: Nouveaux r√¥les `agent-service`, `responsable-service` et permission `approve_service_demande` ajout√©s.
- **TestUsersSeeder.php**: Cr√©ation des utilisateurs de test pour les nouveaux r√¥les et services IT/RH.
- **DemoDataCompletSeeder.php**: Ajout cr√©ation services IT et RH.

## ‚úÖ TESTS EFFECTU√âS
- **Tests Automatis√©s Existants**:
    - Tentative d'ex√©cution avec `php artisan test`: √âchec (`php` non trouv√©).
    - Tentative d'ex√©cution avec `./vendor/bin/sail test`: √âchec (Docker non d√©marr√©).
    - **Conclusion**: Impossible d'ex√©cuter les tests automatis√©s existants dans l'environnement actuel. Cela repr√©sente un risque et n√©cessitera une vigilance accrue lors des tests manuels.
- **Tests Manuels (Simulation)**:
    - Simulation mentale des sc√©narios de test pour le nouveau workflow √† 4 niveaux.
    - **Constatations**:
        - La logique de base du workflow (√©tapes, r√¥les, policies) semble coh√©rente.
        - Le champ `DemandeDevis.statut` est mis √† jour dans les actions Filament.
        - La cr√©ation de l'objet `Commande` lors de l'approbation par le Service Achat est impl√©ment√©e.
        - La mise √† jour de `Commande` et `Livraison` lors de l'√©tape `controle-reception` est impl√©ment√©e.
        - Les scopes et filtres devront √™tre valid√©s en conditions r√©elles avec les statuts mis √† jour.
- (√Ä compl√©ter : Test workflow complet 4 niveaux - r√©el)
- (√Ä compl√©ter : Validation cloisonnement par r√¥le - r√©el)
- (√Ä compl√©ter : Performance benchmarks)
- (√Ä compl√©ter : Tests s√©curit√©)

## üéØ RECOMMANDATIONS
- **Gestion des Statuts Am√©lior√©e**: Envisager l'utilisation d'Event Listeners pour les √©v√©nements du package `Laravel Process Approval` afin de g√©rer les mises √† jour du champ `DemandeDevis.statut` de mani√®re plus d√©coupl√©e et robuste.
- **Test des D√©passements Budg√©taires**: R√©impl√©menter une m√©thode fiable et performante pour calculer et afficher les d√©passements budg√©taires, maintenant que `montant_depense_reel` n'est plus directement requ√™table.
- **Notifications**: Impl√©menter des notifications pour informer les utilisateurs des actions requises ou des changements de statut de leurs demandes.
- **Tests Automatis√©s**: Mettre en place un environnement permettant l'ex√©cution de tests automatis√©s (PHPUnit/Pest) pour garantir la non-r√©gression et la qualit√© du code √† long terme.
- **Revue de S√©curit√© Approfondie**: Une fois l'application fonctionnelle, effectuer une revue de s√©curit√© plus pouss√©e, notamment sur les droits d'acc√®s et la validation des entr√©es.
- **Optimisations Futures**:
    - **Condition Checkers d√©di√©s**: Pour les conditions de workflow complexes ou sp√©cifiques √† certaines √©tapes (ex: `is_service_owner_or_valid_agent`), impl√©menter des classes `ConditionChecker` d√©di√©es comme pr√©vu par `Laravel Process Approval` pour une meilleure organisation du code.
    - **Performance des Dashboards**: Si le nombre de lignes budg√©taires ou de demandes devient tr√®s important, les calculs en PHP pour les statistiques (comme les d√©passements) pourraient devenir lents. Envisager des m√©canismes de cache ou des colonnes de BDD d√©normalis√©es mises √† jour par des t√¢ches planifi√©es pour les indicateurs cl√©s.
- **Points d'Attention**:
    - **Ex√©cution des Seeders et Migrations**: L'utilisateur doit s'assurer que les migrations (notamment celle ajoutant `user_id` √† `demande_devis`) et les seeders (pour les r√¥les, permissions, services et utilisateurs de test) sont ex√©cut√©s correctement dans son environnement.
    - **Configuration de la TVA**: Le taux de TVA est actuellement cod√© en dur (20%) dans le calcul du `prix_total_ttc` (dans `DemandeDevisResource` et ses pages). Si ce taux doit √™tre variable ou configurable, cette logique doit √™tre extraite et g√©r√©e de mani√®re plus flexible (par exemple, via un param√®tre de configuration ou une table de taux de TVA).
    - **Action "Signaler Probl√®me R√©ception"**: La logique m√©tier pour l'action "Signaler Probl√®me R√©ception" (actuellement comment√©e/d√©sactiv√©e dans `DemandeDevisResource`) doit √™tre clarifi√©e et impl√©ment√©e si n√©cessaire (est-ce un rejet, un statut sp√©cifique, une notification ?).
- **√âvolutions Possibles**:
    - **Gestion fine des Commandes et Livraisons**: D√©velopper des interfaces Filament d√©di√©es pour la gestion d√©taill√©e des Commandes (modification apr√®s cr√©ation, ajout d'informations de suivi fournisseur, etc.) et des Livraisons (gestion des livraisons partielles, documents de transport, etc.).
    - **Notifications Utilisateurs D√©taill√©es**: Mettre en place un syst√®me de notifications complet (email, in-app) pour chaque √©tape du workflow, informant les bonnes personnes des actions requises ou des changements de statut.
    - **Tableaux de Bord plus Dynamiques/Personnalis√©s**: Permettre aux utilisateurs de personnaliser davantage leurs tableaux de bord ou d'avoir des vues sp√©cifiques √† leurs besoins (par exemple, un responsable budget pourrait vouloir voir les demandes en attente pour un service sp√©cifique).

## üìù LOG DES ACTIONS DE JULES (Chronologique)
- Action 1: Initialisation du projet et analyse pr√©liminaire.
- Action 2: Cr√©ation du fichier `doc/action_jules.txt`.
- Action 3: **Pr√©paration de l'environnement et des R√¥les/Permissions** (√âtape 1 du plan de d√©v.) :
    - Ajout cr√©ation services "IT" et "RH" dans `DemoDataCompletSeeder.php`.
    - Ajout permission `approve_service_demande` dans `RolePermissionSeeder.php`.
    - Ajout r√¥les `agent-service` et `responsable-service` avec leurs permissions dans `RolePermissionSeeder.php`.
    - Mise √† jour `TestUsersSeeder.php` pour cr√©er les utilisateurs de test sp√©cifiques (agents et responsables pour IT/RH) et commenter l'ancienne cr√©ation g√©n√©rique de `service-demandeur`.
- Action 4: **Adaptation Mod√®le `DemandeDevis` et `config/approval.php`** (√âtape 2 du plan de d√©v.) :
    - Modification `config/approval.php` pour d√©finir le nouveau workflow √† 4 √©tapes (`validation-responsable-service`, `validation-budget`, `validation-achat`, `controle-reception`) avec les r√¥les et conditions initiales.
    - Suppression de `approvalSteps()` et `getApprovalSteps()` de `app/Models/DemandeDevis.php`.
    - Modification de `getCurrentApprovalStepLabel()` dans `DemandeDevis.php` pour utiliser `$this->getCurrentApprovalStep()->label` du package.
    - Modification de `canBeApproved()` dans `DemandeDevis.php` pour appliquer la logique budg√©taire uniquement √† l'√©tape `validation-budget` et ajout de `use Illuminate\Support\Facades\Log;`.
    - Mise √† jour des scopes `EnAttenteBudget`, `EnAttenteAchat` et ajout des scopes `EnAttenteValidationResponsableService`, `EnAttenteReception` dans `DemandeDevis.php`.
- Action 5: **Pr√©paration `DemandeDevisPolicy` et Mod√®le `DemandeDevis` pour `user_id`** (√âtape 3 du plan de d√©v.) :
    - Cr√©ation de la migration `2024_07_15_100000_add_user_id_to_demande_devis_table.php` pour ajouter `user_id` √† `demande_devis`.
    - Ajout de `user_id` aux `$fillable` et de la relation `creator()` dans `app/Models/DemandeDevis.php`.
    - Mise √† jour de `DemandeDevisPolicy.php` :
        - Adaptation de `viewAny`, `view`, `create`, `update`, `delete` pour les r√¥les `agent-service` et `responsable-service`.
        - Commentaire des anciennes m√©thodes `approve` et `reject` g√©n√©riques.
        - Ajout des m√©thodes de permission sp√©cifiques par √©tape : `approveValidationResponsableService`, `rejectValidationResponsableService`, `approveValidationBudget`, `rejectValidationBudget`, `approveValidationAchat`, `rejectValidationAchat`, `approveControleReception`, `rejectControleReception`.
- Action 6: **Adaptation `DemandeDevisResource.php`** (√âtape 4 du plan de d√©v.) :
    - Modification du champ `service_demandeur_id` (formulaire) : adaptation `disabled` et `default` pour `agent-service`, suppression de `request()->get()`.
    - Modification visibilit√© `commentaire_validation` (formulaire) pour inclure `responsable-service`.
    - Modification visibilit√© colonne `serviceDemandeur.nom` (table) pour `agent-service`.
    - Mise √† jour des couleurs du badge pour `current_step_label` (table) pour les nouvelles √©tapes.
    - Mise √† jour des filtres (table) : `mes_demandes` devient `mes_demandes_agent` (bas√© sur `user_id`), ajout de `demandes_mon_service` et `a_valider_responsable_service`, mise √† jour des filtres `a_valider_budget` et `a_valider_achat`.
    - Actions `EditAction` et `DeleteAction` (table) utilisent maintenant la Policy.
    - Remplacement des actions `approve`/`reject` g√©n√©riques par des actions sp√©cifiques √† chaque √©tape utilisant les m√©thodes de la Policy. Action `mark_delivered` supprim√©e.
    - Adaptation de `getEloquentQuery()` pour le cloisonnement des donn√©es des r√¥les `agent-service`, `responsable-service`, `service-achat` et ajout `with('creator')`.
    - Mise √† jour de `mutateFormDataBeforeCreate` dans `CreateDemandeDevis.php` pour assigner `user_id` et recalculer `prix_total_ttc` c√¥t√© serveur.
    - Mise √† jour de `mutateFormDataBeforeSave` dans `EditDemandeDevis.php` pour commenter la logique d'autorisation redondante et conserver les recalculs/validations de donn√©es.
- Action 7: **Adaptation Mod√®les `BudgetLigne` et `User` (Points d'Audit)** (√âtape 5 du plan de d√©v.) :
    - `BudgetLigne.php` : Scope global `service` comment√©. `montant_depense_reel` retir√© de `$fillable`.
    - `User.php` : Utilisation de `is_service_responsable` confirm√©e via `TestUsersSeeder`.
- Action 8: **Ajustement Dashboards (Phase Initiale)** (√âtape 6 du plan de d√©v.) :
    - `BudgetStatsWidget.php` : Condition principale adapt√©e pour `agent-service`/`responsable-service`. `getServiceStats` adapt√© pour le calcul des demandes en cours. `getGlobalStats` modifi√© pour "Nouvelles Demandes Soumises" et stat "D√©passements" comment√©e.
    - `BudgetDashboard.php` (Livewire) : Logique de r√¥le dans `mount()` adapt√©e. `getServiceStats` adapt√© pour demandes en cours. `getGlobalStats` modifi√© pour "Nouvelles Demandes Soumises" et stat "D√©passements" comment√©e.
- Action 9: **Finalisation Logique Workflow (Statuts et Cr√©ation Commande)** (Partie de l'√©tape 7 du plan de d√©v.) :
    - Mise √† jour des actions d'approbation/rejet dans `DemandeDevisResource.php` pour actualiser le champ `DemandeDevis.statut` apr√®s chaque transition (ex: `pending_budget_validation`, `rejected`, `awaiting_delivery`, `delivered`).
    - Ajout de la logique de cr√©ation d'un enregistrement `Commande` dans l'action `approve_achat` de `DemandeDevisResource.php`, liant la nouvelle commande √† la demande de devis.
- Action 10: **Logique Post-R√©ception (Mise √† jour Commande/Livraison)** (√âtape 7b du plan de d√©v.) :
    - Dans `DemandeDevisResource.php`, action `approve_reception` : ajout de la logique pour mettre √† jour le statut de la `Commande` associ√©e (ex: `livree_validee`) et les d√©tails de la `Livraison` (ex: `statut_reception = 'recue_confirmee'`, `conforme = true`).

*(Ce log sera compl√©t√© au fur et √† mesure des actions)*
